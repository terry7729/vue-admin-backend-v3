/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protoc.Head', null, global);
goog.exportSymbol('proto.protoc.ImAckReadedMsg', null, global);
goog.exportSymbol('proto.protoc.ImAckReadedMsgRes', null, global);
goog.exportSymbol('proto.protoc.ImClientSendMsg', null, global);
goog.exportSymbol('proto.protoc.ImClientSendMsgRes', null, global);
goog.exportSymbol('proto.protoc.ImGetUnreadMsg', null, global);
goog.exportSymbol('proto.protoc.ImGetUnreadMsgRes', null, global);
goog.exportSymbol('proto.protoc.ImHeartPing', null, global);
goog.exportSymbol('proto.protoc.ImHeartPong', null, global);
goog.exportSymbol('proto.protoc.ImHistoryMsg', null, global);
goog.exportSymbol('proto.protoc.ImLogin', null, global);
goog.exportSymbol('proto.protoc.ImLoginRes', null, global);
goog.exportSymbol('proto.protoc.ImLogout', null, global);
goog.exportSymbol('proto.protoc.ImLogoutRes', null, global);
goog.exportSymbol('proto.protoc.ImNotifyCustomerChartBegin', null, global);
goog.exportSymbol('proto.protoc.ImNotifyCustomerChartEnd', null, global);
goog.exportSymbol('proto.protoc.ImNotifyCustomerChartTransfered', null, global);
goog.exportSymbol('proto.protoc.ImNotifyRtMsg', null, global);
goog.exportSymbol('proto.protoc.ImNotifyRtMsgRes', null, global);
goog.exportSymbol('proto.protoc.ImPullMsg', null, global);
goog.exportSymbol('proto.protoc.ImPullMsgRes', null, global);
goog.exportSymbol('proto.protoc.ImServerNotifyOffline', null, global);
goog.exportSymbol('proto.protoc.ImServerNotifyOfflineRes', null, global);
goog.exportSymbol('proto.protoc.ImSyncBegin', null, global);
goog.exportSymbol('proto.protoc.ImSyncEnd', null, global);
goog.exportSymbol('proto.protoc.ImSyncNotify', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.Head = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.Head, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.Head.displayName = 'proto.protoc.Head';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.Head.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.Head.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.Head} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.Head.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flag: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.Head}
 */
proto.protoc.Head.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.Head;
  return proto.protoc.Head.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.Head} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.Head}
 */
proto.protoc.Head.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeq(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.Head.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.Head.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.Head} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.Head.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 cmd = 1;
 * @return {number}
 */
proto.protoc.Head.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protoc.Head.prototype.setCmd = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 seq = 2;
 * @return {number}
 */
proto.protoc.Head.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.Head.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.protoc.Head.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.Head.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 flag = 4;
 * @return {number}
 */
proto.protoc.Head.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.Head.prototype.setFlag = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImHeartPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImHeartPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImHeartPing.displayName = 'proto.protoc.ImHeartPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImHeartPing.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImHeartPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImHeartPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHeartPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImHeartPing}
 */
proto.protoc.ImHeartPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImHeartPing;
  return proto.protoc.ImHeartPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImHeartPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImHeartPing}
 */
proto.protoc.ImHeartPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImHeartPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImHeartPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImHeartPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHeartPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImHeartPing.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImHeartPing.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImHeartPing.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImHeartPing.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImHeartPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImHeartPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImHeartPong.displayName = 'proto.protoc.ImHeartPong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImHeartPong.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImHeartPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImHeartPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHeartPong.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImHeartPong}
 */
proto.protoc.ImHeartPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImHeartPong;
  return proto.protoc.ImHeartPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImHeartPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImHeartPong}
 */
proto.protoc.ImHeartPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImHeartPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImHeartPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImHeartPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHeartPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImHeartPong.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImHeartPong.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImHeartPong.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImHeartPong.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImLogin.displayName = 'proto.protoc.ImLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    devid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    role: jspb.Message.getFieldWithDefault(msg, 6, ""),
    platformId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImLogin}
 */
proto.protoc.ImLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImLogin;
  return proto.protoc.ImLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImLogin}
 */
proto.protoc.ImLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatformId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDevid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlatformId();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImLogin.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImLogin.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImLogin.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImLogin.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.protoc.ImLogin.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImLogin.prototype.setNo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.protoc.ImLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protoc.ImLogin.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.protoc.ImLogin.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImLogin.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string devID = 5;
 * @return {string}
 */
proto.protoc.ImLogin.prototype.getDevid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protoc.ImLogin.prototype.setDevid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string role = 6;
 * @return {string}
 */
proto.protoc.ImLogin.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protoc.ImLogin.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 platform_id = 7;
 * @return {number}
 */
proto.protoc.ImLogin.prototype.getPlatformId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc.ImLogin.prototype.setPlatformId = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImLoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImLoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImLoginRes.displayName = 'proto.protoc.ImLoginRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImLoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImLoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImLoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ackoffset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    errorinfo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 7, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImLoginRes}
 */
proto.protoc.ImLoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImLoginRes;
  return proto.protoc.ImLoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImLoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImLoginRes}
 */
proto.protoc.ImLoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckoffset(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorinfo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImLoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImLoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImLoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSessionid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAckoffset();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getErrorinfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIp();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImLoginRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImLoginRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImLoginRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImLoginRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 code = 2;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 sessionID = 3;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setSessionid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 offset = 4;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ackOffset = 5;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getAckoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setAckoffset = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string errorInfo = 6;
 * @return {string}
 */
proto.protoc.ImLoginRes.prototype.getErrorinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protoc.ImLoginRes.prototype.setErrorinfo = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 ip = 7;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setIp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 uid = 8;
 * @return {number}
 */
proto.protoc.ImLoginRes.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protoc.ImLoginRes.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImLogout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImLogout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImLogout.displayName = 'proto.protoc.ImLogout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImLogout.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImLogout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImLogout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogout.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    devid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    role: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImLogout}
 */
proto.protoc.ImLogout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImLogout;
  return proto.protoc.ImLogout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImLogout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImLogout}
 */
proto.protoc.ImLogout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImLogout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImLogout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImLogout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDevid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImLogout.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImLogout.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImLogout.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImLogout.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.protoc.ImLogout.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImLogout.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.protoc.ImLogout.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImLogout.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string devID = 4;
 * @return {string}
 */
proto.protoc.ImLogout.prototype.getDevid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protoc.ImLogout.prototype.setDevid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string role = 5;
 * @return {string}
 */
proto.protoc.ImLogout.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protoc.ImLogout.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImLogoutRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImLogoutRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImLogoutRes.displayName = 'proto.protoc.ImLogoutRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImLogoutRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImLogoutRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImLogoutRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogoutRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImLogoutRes}
 */
proto.protoc.ImLogoutRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImLogoutRes;
  return proto.protoc.ImLogoutRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImLogoutRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImLogoutRes}
 */
proto.protoc.ImLogoutRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImLogoutRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImLogoutRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImLogoutRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImLogoutRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImLogoutRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImLogoutRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImLogoutRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImLogoutRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 code = 2;
 * @return {number}
 */
proto.protoc.ImLogoutRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImLogoutRes.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImNotifyRtMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImNotifyRtMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImNotifyRtMsg.displayName = 'proto.protoc.ImNotifyRtMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImNotifyRtMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImNotifyRtMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImNotifyRtMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyRtMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    msgid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromno: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromuid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    len: jspb.Message.getFieldWithDefault(msg, 7, 0),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImNotifyRtMsg}
 */
proto.protoc.ImNotifyRtMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImNotifyRtMsg;
  return proto.protoc.ImNotifyRtMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImNotifyRtMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImNotifyRtMsg}
 */
proto.protoc.ImNotifyRtMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromno(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubtype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLen(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyRtMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImNotifyRtMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImNotifyRtMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyRtMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFromno();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromuid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSubtype();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImNotifyRtMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImNotifyRtMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImNotifyRtMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImNotifyRtMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 msgid = 2;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsg.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsg.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string fromNo = 3;
 * @return {string}
 */
proto.protoc.ImNotifyRtMsg.prototype.getFromno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyRtMsg.prototype.setFromno = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 fromUid = 4;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsg.prototype.getFromuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsg.prototype.setFromuid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 type = 5;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsg.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 subType = 6;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsg.prototype.getSubtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsg.prototype.setSubtype = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 len = 7;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsg.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsg.prototype.setLen = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes content = 8;
 * @return {!(string|Uint8Array)}
 */
proto.protoc.ImNotifyRtMsg.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes content = 8;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protoc.ImNotifyRtMsg.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyRtMsg.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protoc.ImNotifyRtMsg.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImNotifyRtMsgRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImNotifyRtMsgRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImNotifyRtMsgRes.displayName = 'proto.protoc.ImNotifyRtMsgRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImNotifyRtMsgRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImNotifyRtMsgRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImNotifyRtMsgRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyRtMsgRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    msgid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImNotifyRtMsgRes}
 */
proto.protoc.ImNotifyRtMsgRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImNotifyRtMsgRes;
  return proto.protoc.ImNotifyRtMsgRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImNotifyRtMsgRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImNotifyRtMsgRes}
 */
proto.protoc.ImNotifyRtMsgRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyRtMsgRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImNotifyRtMsgRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImNotifyRtMsgRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyRtMsgRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImNotifyRtMsgRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImNotifyRtMsgRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImNotifyRtMsgRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImNotifyRtMsgRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 msgid = 2;
 * @return {number}
 */
proto.protoc.ImNotifyRtMsgRes.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyRtMsgRes.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImGetUnreadMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImGetUnreadMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImGetUnreadMsg.displayName = 'proto.protoc.ImGetUnreadMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImGetUnreadMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImGetUnreadMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImGetUnreadMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImGetUnreadMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImGetUnreadMsg}
 */
proto.protoc.ImGetUnreadMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImGetUnreadMsg;
  return proto.protoc.ImGetUnreadMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImGetUnreadMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImGetUnreadMsg}
 */
proto.protoc.ImGetUnreadMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImGetUnreadMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImGetUnreadMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImGetUnreadMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImGetUnreadMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImGetUnreadMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImGetUnreadMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImGetUnreadMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImGetUnreadMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImGetUnreadMsg.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImGetUnreadMsg.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImGetUnreadMsgRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImGetUnreadMsgRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImGetUnreadMsgRes.displayName = 'proto.protoc.ImGetUnreadMsgRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImGetUnreadMsgRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImGetUnreadMsgRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImGetUnreadMsgRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ackoffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImGetUnreadMsgRes}
 */
proto.protoc.ImGetUnreadMsgRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImGetUnreadMsgRes;
  return proto.protoc.ImGetUnreadMsgRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImGetUnreadMsgRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImGetUnreadMsgRes}
 */
proto.protoc.ImGetUnreadMsgRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAckoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImGetUnreadMsgRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImGetUnreadMsgRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImGetUnreadMsgRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAckoffset();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImGetUnreadMsgRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImGetUnreadMsgRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImGetUnreadMsgRes.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ackOffset = 3;
 * @return {number}
 */
proto.protoc.ImGetUnreadMsgRes.prototype.getAckoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImGetUnreadMsgRes.prototype.setAckoffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImPullMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImPullMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImPullMsg.displayName = 'proto.protoc.ImPullMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImPullMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImPullMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImPullMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImPullMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImPullMsg}
 */
proto.protoc.ImPullMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImPullMsg;
  return proto.protoc.ImPullMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImPullMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImPullMsg}
 */
proto.protoc.ImPullMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImPullMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImPullMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImPullMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImPullMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImPullMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImPullMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImPullMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImPullMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.protoc.ImPullMsg.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImPullMsg.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 num = 3;
 * @return {number}
 */
proto.protoc.ImPullMsg.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImPullMsg.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImPullMsgRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImPullMsgRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImPullMsgRes.displayName = 'proto.protoc.ImPullMsgRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImPullMsgRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImPullMsgRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImPullMsgRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImPullMsgRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ackoffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImPullMsgRes}
 */
proto.protoc.ImPullMsgRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImPullMsgRes;
  return proto.protoc.ImPullMsgRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImPullMsgRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImPullMsgRes}
 */
proto.protoc.ImPullMsgRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImPullMsgRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImPullMsgRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImPullMsgRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImPullMsgRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAckoffset();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImPullMsgRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImPullMsgRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImPullMsgRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImPullMsgRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.protoc.ImPullMsgRes.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImPullMsgRes.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ackOffset = 3;
 * @return {number}
 */
proto.protoc.ImPullMsgRes.prototype.getAckoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImPullMsgRes.prototype.setAckoffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImAckReadedMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImAckReadedMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImAckReadedMsg.displayName = 'proto.protoc.ImAckReadedMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImAckReadedMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImAckReadedMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImAckReadedMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImAckReadedMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    ackoffset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImAckReadedMsg}
 */
proto.protoc.ImAckReadedMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImAckReadedMsg;
  return proto.protoc.ImAckReadedMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImAckReadedMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImAckReadedMsg}
 */
proto.protoc.ImAckReadedMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImAckReadedMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImAckReadedMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImAckReadedMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImAckReadedMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getAckoffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImAckReadedMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImAckReadedMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImAckReadedMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImAckReadedMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 ackOffset = 2;
 * @return {number}
 */
proto.protoc.ImAckReadedMsg.prototype.getAckoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImAckReadedMsg.prototype.setAckoffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImAckReadedMsgRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImAckReadedMsgRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImAckReadedMsgRes.displayName = 'proto.protoc.ImAckReadedMsgRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImAckReadedMsgRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImAckReadedMsgRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImAckReadedMsgRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImAckReadedMsgRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ackoffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImAckReadedMsgRes}
 */
proto.protoc.ImAckReadedMsgRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImAckReadedMsgRes;
  return proto.protoc.ImAckReadedMsgRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImAckReadedMsgRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImAckReadedMsgRes}
 */
proto.protoc.ImAckReadedMsgRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImAckReadedMsgRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImAckReadedMsgRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImAckReadedMsgRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImAckReadedMsgRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAckoffset();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImAckReadedMsgRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImAckReadedMsgRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImAckReadedMsgRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImAckReadedMsgRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.protoc.ImAckReadedMsgRes.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImAckReadedMsgRes.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ackOffset = 3;
 * @return {number}
 */
proto.protoc.ImAckReadedMsgRes.prototype.getAckoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImAckReadedMsgRes.prototype.setAckoffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImClientSendMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImClientSendMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImClientSendMsg.displayName = 'proto.protoc.ImClientSendMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImClientSendMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImClientSendMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImClientSendMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImClientSendMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextoffset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromuid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    touid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    len: jspb.Message.getFieldWithDefault(msg, 8, 0),
    msgtype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImClientSendMsg}
 */
proto.protoc.ImClientSendMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImClientSendMsg;
  return proto.protoc.ImClientSendMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImClientSendMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImClientSendMsg}
 */
proto.protoc.ImClientSendMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextoffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFromuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTouid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLen(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImClientSendMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImClientSendMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImClientSendMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImClientSendMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextoffset();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFromuid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTouid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMsgtype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImClientSendMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImClientSendMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImClientSendMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImClientSendMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 nextOffset = 3;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getNextoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setNextoffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 fromUID = 4;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getFromuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setFromuid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 toUID = 5;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getTouid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setTouid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 timestamp = 6;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 msgid = 7;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 len = 8;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setLen = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 msgType = 9;
 * @return {number}
 */
proto.protoc.ImClientSendMsg.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsg.prototype.setMsgtype = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes content = 10;
 * @return {!(string|Uint8Array)}
 */
proto.protoc.ImClientSendMsg.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes content = 10;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protoc.ImClientSendMsg.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protoc.ImClientSendMsg.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protoc.ImClientSendMsg.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImClientSendMsgRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImClientSendMsgRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImClientSendMsgRes.displayName = 'proto.protoc.ImClientSendMsgRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImClientSendMsgRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImClientSendMsgRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImClientSendMsgRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImClientSendMsgRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    touid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    len: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    code: jspb.Message.getFieldWithDefault(msg, 5, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImClientSendMsgRes}
 */
proto.protoc.ImClientSendMsgRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImClientSendMsgRes;
  return proto.protoc.ImClientSendMsgRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImClientSendMsgRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImClientSendMsgRes}
 */
proto.protoc.ImClientSendMsgRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTouid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImClientSendMsgRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImClientSendMsgRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImClientSendMsgRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImClientSendMsgRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getTouid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImClientSendMsgRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImClientSendMsgRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImClientSendMsgRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImClientSendMsgRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 toUID = 2;
 * @return {number}
 */
proto.protoc.ImClientSendMsgRes.prototype.getTouid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsgRes.prototype.setTouid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 len = 3;
 * @return {number}
 */
proto.protoc.ImClientSendMsgRes.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsgRes.prototype.setLen = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 msgid = 4;
 * @return {number}
 */
proto.protoc.ImClientSendMsgRes.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsgRes.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 code = 5;
 * @return {number}
 */
proto.protoc.ImClientSendMsgRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsgRes.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 offset = 6;
 * @return {number}
 */
proto.protoc.ImClientSendMsgRes.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protoc.ImClientSendMsgRes.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImServerNotifyOffline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImServerNotifyOffline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImServerNotifyOffline.displayName = 'proto.protoc.ImServerNotifyOffline';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImServerNotifyOffline.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImServerNotifyOffline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImServerNotifyOffline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImServerNotifyOffline.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    userno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImServerNotifyOffline}
 */
proto.protoc.ImServerNotifyOffline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImServerNotifyOffline;
  return proto.protoc.ImServerNotifyOffline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImServerNotifyOffline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImServerNotifyOffline}
 */
proto.protoc.ImServerNotifyOffline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImServerNotifyOffline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImServerNotifyOffline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImServerNotifyOffline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImServerNotifyOffline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getUserno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReason();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImServerNotifyOffline.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImServerNotifyOffline.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImServerNotifyOffline.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImServerNotifyOffline.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userNo = 2;
 * @return {string}
 */
proto.protoc.ImServerNotifyOffline.prototype.getUserno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImServerNotifyOffline.prototype.setUserno = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 uID = 3;
 * @return {number}
 */
proto.protoc.ImServerNotifyOffline.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImServerNotifyOffline.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 reason = 4;
 * @return {number}
 */
proto.protoc.ImServerNotifyOffline.prototype.getReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImServerNotifyOffline.prototype.setReason = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImServerNotifyOfflineRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImServerNotifyOfflineRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImServerNotifyOfflineRes.displayName = 'proto.protoc.ImServerNotifyOfflineRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImServerNotifyOfflineRes.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImServerNotifyOfflineRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImServerNotifyOfflineRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImServerNotifyOfflineRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImServerNotifyOfflineRes}
 */
proto.protoc.ImServerNotifyOfflineRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImServerNotifyOfflineRes;
  return proto.protoc.ImServerNotifyOfflineRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImServerNotifyOfflineRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImServerNotifyOfflineRes}
 */
proto.protoc.ImServerNotifyOfflineRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImServerNotifyOfflineRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImServerNotifyOfflineRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImServerNotifyOfflineRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImServerNotifyOfflineRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImServerNotifyOfflineRes.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImServerNotifyOfflineRes.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImServerNotifyOfflineRes.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImServerNotifyOfflineRes.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImSyncNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImSyncNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImSyncNotify.displayName = 'proto.protoc.ImSyncNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImSyncNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImSyncNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImSyncNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImSyncNotify}
 */
proto.protoc.ImSyncNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImSyncNotify;
  return proto.protoc.ImSyncNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImSyncNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImSyncNotify}
 */
proto.protoc.ImSyncNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImSyncNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImSyncNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImSyncNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImSyncNotify.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImSyncNotify.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImSyncNotify.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImSyncNotify.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImSyncNotify.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImSyncNotify.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImSyncBegin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImSyncBegin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImSyncBegin.displayName = 'proto.protoc.ImSyncBegin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImSyncBegin.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImSyncBegin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImSyncBegin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncBegin.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImSyncBegin}
 */
proto.protoc.ImSyncBegin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImSyncBegin;
  return proto.protoc.ImSyncBegin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImSyncBegin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImSyncBegin}
 */
proto.protoc.ImSyncBegin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImSyncBegin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImSyncBegin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImSyncBegin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncBegin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImSyncBegin.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImSyncBegin.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImSyncBegin.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImSyncBegin.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImSyncBegin.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImSyncBegin.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImSyncEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImSyncEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImSyncEnd.displayName = 'proto.protoc.ImSyncEnd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImSyncEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImSyncEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImSyncEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImSyncEnd}
 */
proto.protoc.ImSyncEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImSyncEnd;
  return proto.protoc.ImSyncEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImSyncEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImSyncEnd}
 */
proto.protoc.ImSyncEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImSyncEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImSyncEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImSyncEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImSyncEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImSyncEnd.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImSyncEnd.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImSyncEnd.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImSyncEnd.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImSyncEnd.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImSyncEnd.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImNotifyCustomerChartBegin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImNotifyCustomerChartBegin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImNotifyCustomerChartBegin.displayName = 'proto.protoc.ImNotifyCustomerChartBegin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImNotifyCustomerChartBegin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImNotifyCustomerChartBegin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartBegin.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    customerno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customeruid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImNotifyCustomerChartBegin}
 */
proto.protoc.ImNotifyCustomerChartBegin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImNotifyCustomerChartBegin;
  return proto.protoc.ImNotifyCustomerChartBegin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImNotifyCustomerChartBegin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImNotifyCustomerChartBegin}
 */
proto.protoc.ImNotifyCustomerChartBegin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomeruid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImNotifyCustomerChartBegin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImNotifyCustomerChartBegin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartBegin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getCustomerno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomeruid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImNotifyCustomerChartBegin.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImNotifyCustomerChartBegin.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string customerNo = 2;
 * @return {string}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.getCustomerno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyCustomerChartBegin.prototype.setCustomerno = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 customerUID = 3;
 * @return {number}
 */
proto.protoc.ImNotifyCustomerChartBegin.prototype.getCustomeruid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyCustomerChartBegin.prototype.setCustomeruid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImNotifyCustomerChartEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImNotifyCustomerChartEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImNotifyCustomerChartEnd.displayName = 'proto.protoc.ImNotifyCustomerChartEnd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImNotifyCustomerChartEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImNotifyCustomerChartEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    customerno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customeruid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    code: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reasondesp: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImNotifyCustomerChartEnd}
 */
proto.protoc.ImNotifyCustomerChartEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImNotifyCustomerChartEnd;
  return proto.protoc.ImNotifyCustomerChartEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImNotifyCustomerChartEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImNotifyCustomerChartEnd}
 */
proto.protoc.ImNotifyCustomerChartEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomeruid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReasondesp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImNotifyCustomerChartEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImNotifyCustomerChartEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getCustomerno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomeruid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReasondesp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImNotifyCustomerChartEnd.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImNotifyCustomerChartEnd.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string customerNo = 2;
 * @return {string}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.getCustomerno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyCustomerChartEnd.prototype.setCustomerno = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 customerUID = 3;
 * @return {number}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.getCustomeruid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyCustomerChartEnd.prototype.setCustomeruid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 code = 4;
 * @return {number}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyCustomerChartEnd.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string reasonDesp = 5;
 * @return {string}
 */
proto.protoc.ImNotifyCustomerChartEnd.prototype.getReasondesp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyCustomerChartEnd.prototype.setReasondesp = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImNotifyCustomerChartTransfered = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImNotifyCustomerChartTransfered, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImNotifyCustomerChartTransfered.displayName = 'proto.protoc.ImNotifyCustomerChartTransfered';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImNotifyCustomerChartTransfered.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImNotifyCustomerChartTransfered} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartTransfered.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    customerno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customeruid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    newcustomerno: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newcustomeruid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImNotifyCustomerChartTransfered}
 */
proto.protoc.ImNotifyCustomerChartTransfered.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImNotifyCustomerChartTransfered;
  return proto.protoc.ImNotifyCustomerChartTransfered.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImNotifyCustomerChartTransfered} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImNotifyCustomerChartTransfered}
 */
proto.protoc.ImNotifyCustomerChartTransfered.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCustomeruid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewcustomerno(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNewcustomeruid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImNotifyCustomerChartTransfered.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImNotifyCustomerChartTransfered} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImNotifyCustomerChartTransfered.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getCustomerno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomeruid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNewcustomerno();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewcustomeruid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImNotifyCustomerChartTransfered.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string customerNo = 2;
 * @return {string}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.getCustomerno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.setCustomerno = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 customerUID = 3;
 * @return {number}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.getCustomeruid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.setCustomeruid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string newCustomerNo = 4;
 * @return {string}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.getNewcustomerno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.setNewcustomerno = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 newCustomerUID = 5;
 * @return {number}
 */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.getNewcustomeruid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImNotifyCustomerChartTransfered.prototype.setNewcustomeruid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc.ImHistoryMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc.ImHistoryMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protoc.ImHistoryMsg.displayName = 'proto.protoc.ImHistoryMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc.ImHistoryMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc.ImHistoryMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc.ImHistoryMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHistoryMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.protoc.Head.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextoffset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromuid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    touid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    len: jspb.Message.getFieldWithDefault(msg, 8, 0),
    msgtype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc.ImHistoryMsg}
 */
proto.protoc.ImHistoryMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc.ImHistoryMsg;
  return proto.protoc.ImHistoryMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc.ImHistoryMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc.ImHistoryMsg}
 */
proto.protoc.ImHistoryMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protoc.Head;
      reader.readMessage(value,proto.protoc.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextoffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFromuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTouid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLen(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc.ImHistoryMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc.ImHistoryMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc.ImHistoryMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc.ImHistoryMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protoc.Head.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextoffset();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFromuid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTouid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMsgtype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.protoc.Head}
 */
proto.protoc.ImHistoryMsg.prototype.getHead = function() {
  return /** @type{?proto.protoc.Head} */ (
    jspb.Message.getWrapperField(this, proto.protoc.Head, 1));
};


/** @param {?proto.protoc.Head|undefined} value */
proto.protoc.ImHistoryMsg.prototype.setHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protoc.ImHistoryMsg.prototype.clearHead = function() {
  this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protoc.ImHistoryMsg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 nextOffset = 3;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getNextoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setNextoffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 fromUID = 4;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getFromuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setFromuid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 toUID = 5;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getTouid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setTouid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 timestamp = 6;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 msgid = 7;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setMsgid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 len = 8;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setLen = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 msgType = 9;
 * @return {number}
 */
proto.protoc.ImHistoryMsg.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protoc.ImHistoryMsg.prototype.setMsgtype = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes content = 10;
 * @return {!(string|Uint8Array)}
 */
proto.protoc.ImHistoryMsg.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes content = 10;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protoc.ImHistoryMsg.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protoc.ImHistoryMsg.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protoc.ImHistoryMsg.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


goog.object.extend(exports, proto.protoc);
